# Generated by Django 4.2.2 on 2023-07-01 19:31

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='IrrigationSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('irrigation_type', models.CharField(choices=[('day', 'Por dia'), ('time', 'Por horário'), ('humidity', 'Por umidade'), ('flow', 'Por vazão')], max_length=8)),
                ('irrigation_period', models.CharField(blank=True, choices=[('unique', 'Único'), ('daily', 'Diário')], max_length=6, null=True)),
                ('status', models.CharField(choices=[('irrigated', 'Irrigado'), ('irrigating', 'Irrigando'), ('scheduled', 'Agendado')], default='scheduled', max_length=10)),
                ('datetime_on', models.DateTimeField(blank=True, null=True)),
                ('datetime_off', models.DateTimeField(blank=True, null=True)),
                ('time_on', models.TimeField(blank=True, null=True)),
                ('time_off', models.TimeField(blank=True, null=True)),
                ('humidity_on', models.IntegerField(blank=True, null=True)),
                ('humidity_off', models.IntegerField(blank=True, null=True)),
                ('night_irrigation', models.BooleanField(blank=True, null=True)),
                ('water_flow', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Schedule Irrigation',
                'verbose_name_plural': 'Schedule Irrigations',
            },
        ),
        migrations.CreateModel(
            name='IrrigationTest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('irrigation_time', models.IntegerField()),
                ('available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Irrigation Test',
                'verbose_name_plural': 'Irrigation Tests',
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('message', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
            },
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rain_level', models.IntegerField()),
                ('soil_moisture', models.IntegerField()),
                ('humidity', models.FloatField()),
                ('temperature', models.FloatField()),
                ('dew_point', models.FloatField()),
                ('heat_index', models.FloatField()),
                ('air_quality', models.FloatField()),
                ('atmospheric_pressure', models.FloatField()),
                ('water_flow', models.FloatField()),
                ('amount_water', models.FloatField()),
                ('percentage_water', models.FloatField()),
                ('luminosity', models.FloatField()),
                ('ultraviolet_radiation', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Sensor',
                'verbose_name_plural': 'Sensors',
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('temperature_measurement', models.CharField(choices=[('kelvin', 'Kelvin (K)'), ('celsius', 'Celsius (°C)'), ('fahrenheit', 'Fahrenheit (°F)')], default='celsius', max_length=10)),
                ('reservoir_shape', models.CharField(choices=[('cube', 'Cubo'), ('cylinder', 'Cilindro'), ('parallelepiped', 'Paralelepípedo'), ('cone-trunk', 'Tronco de Cone'), ('pyramid-trunk', 'Tronco de Pirâmide')], default='cube', max_length=14)),
                ('reservoir_capacity', models.FloatField(blank=True, null=True)),
                ('reservoir_height', models.FloatField(blank=True, null=True)),
                ('reservoir_width', models.FloatField(blank=True, null=True)),
                ('reservoir_length', models.FloatField(blank=True, null=True)),
                ('reservoir_diameter', models.FloatField(blank=True, null=True)),
                ('reservoir_larger_base_diameter', models.FloatField(blank=True, null=True)),
                ('reservoir_smaller_base_diameter', models.FloatField(blank=True, null=True)),
                ('reservoir_larger_base_area', models.FloatField(blank=True, null=True)),
                ('reservoir_smaller_base_area', models.FloatField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Setting',
                'verbose_name_plural': 'Settings',
            },
        ),
        migrations.CreateModel(
            name='WaterConsumption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('consumption', models.FloatField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Water Consumption',
                'verbose_name_plural': 'Water Consumption',
            },
        ),
        migrations.CreateModel(
            name='ResetPassword',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token', models.CharField(max_length=36, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Reset Password',
                'verbose_name_plural': 'Reset Passwords',
            },
        ),
    ]
